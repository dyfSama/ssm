<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/task
                           http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 配置整合 mybatis -->

    <!-- 1. 读取数据库配置文件  ignore-unresolvable="true" 防止第二个配置读取不到-->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>

    <!-- 2.数据源 1 c3p0 -->
    <!--<bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
        <!--&lt;!&ndash; 数据库连接 &ndash;&gt;-->
        <!--<property name="driverClass" value="${jdbc.driver}"/>-->
        <!--<property name="jdbcUrl" value="${jdbc.url}"/>-->
        <!--<property name="user" value="${jdbc.username}"/>-->
        <!--<property name="password" value="${jdbc.password}"/>-->

        <!--&lt;!&ndash; c3p0连接池的私有属性 &ndash;&gt;-->
        <!--<property name="maxPoolSize" value="30"/>-->
        <!--<property name="minPoolSize" value="10"/>-->
        <!--&lt;!&ndash; 关闭连接后不自动commit &ndash;&gt;-->
        <!--<property name="autoCommitOnClose" value="false"/>-->
        <!--&lt;!&ndash; 获取连接超时时间 &ndash;&gt;-->
        <!--<property name="checkoutTimeout" value="10000"/>-->
        <!--&lt;!&ndash; 当获取连接失败重试次数 &ndash;&gt;-->
        <!--<property name="acquireRetryAttempts" value="2"/>-->

    <!--</bean>-->

    <!--   数据源 2 阿里druid数据库连接池  init-method druid管理页面不限数据源信息..(bug?)-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="filters" value="${filters}"/>

        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${removeAbandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}"/>

    </bean>


    <!-- 3.配置SqlSessionFactory对象,  这里自定义factoryBean  实现 typeAliasesPackage 通配符-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <bean id="sqlSessionFactory" class="com.dyf.common.factoryBean.PackagesSqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描pojo包 使用别名 -->
        <property name="typeAliasesPackage" value="com.dyf.**.entity"/>
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 扫描Dao接口包 -->
        <property name="basePackage" value="com.dyf.**.mapper"/>
    </bean>

    <!-- 5.扫描service包下所有使用注解的类型-->
    <context:component-scan base-package="com.dyf">
        <!-- controller 扫描配置在spring-mvc.xml,这里要排除掉 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 6.配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 7.配置基于注解的声明式事物-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- 8.打开任务调度 -->
    <!-- 任务执行线程池的初始大小 -->
    <!--    <task:executor id="executor" pool-size="5"/>
        &lt;!&ndash;  任务调度线程池的大小 &ndash;&gt;
        <task:scheduler id="scheduler" pool-size="10"/>
        &lt;!&ndash;  定时器开关 &ndash;&gt;
        <task:annotation-driven executor="executor" scheduler="scheduler"  />

        <task:scheduled-tasks>
            &lt;!&ndash;  这里表示的是每隔五秒执行一次   &ndash;&gt;
            <task:scheduled ref="task" method="show" cron="*/5 * * * * ?" />
            <task:scheduled ref="task" method="print" cron="*/10 * * * * ?"/>
        </task:scheduled-tasks>

        <bean id="task" class="com.dyf.system.job.controller.SpringTaskXml"></bean>-->



    <!-- 图形验证码工具类 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!--边框配置 ,不要了-->
                        <prop key="kaptcha.border">no</prop>
                        <!--<prop key="kaptcha.border.thickness">2</prop>
                        <prop key="kaptcha.border.color">105,179,90</prop>-->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <prop key="kaptcha.image.width">100</prop>
                        <prop key="kaptcha.image.height">35</prop>
                        <prop key="kaptcha.textproducer.font.size">28</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.textproducer.char.space">4</prop>
                        <prop key="kaptcha.textproducer.font.names">微软雅黑</prop>
                        <!-- 不要干扰线 -->
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <!-- 图片样式:阴影[水纹,鱼眼,阴影] -->
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>
                        <prop key="kaptcha.session.key">imgCode</prop><!-- sessionkey -->
                        <prop key="kaptcha.session.date">30</prop><!-- session有效时间 -->
                        <!-- 验证码的来源 -->
                        <prop key="kaptcha.textproducer.char.string">23456789ABCEFGHJKLMNPRSTUVWXY</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>


</beans>